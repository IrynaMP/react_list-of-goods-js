{"version":3,"sources":["App.jsx","index.jsx"],"names":["goodsFromServer","SORT_FIELD_NAME","SORT_FIELD_LENGTH","App","useState","sortField","setSortField","isReversed","setIsReversed","visibleGoods","goods","preparedGoods","reverse","sort","good1","good2","localeCompare","length","getPreparedGoods","className","type","classNames","onClick","map","good","ReactDOM","render","document","getElementById"],"mappings":"iPAKaA,EAAkB,CAC7B,YACA,SACA,OACA,YACA,QACA,QACA,OACA,QACA,MACA,UAEIC,EAAkB,OAClBC,EAAoB,SAmCnB,IAAMC,EAAM,WACjB,MAAkCC,mBAAS,IAA3C,mBAAOC,EAAP,KAAkBC,EAAlB,KACA,EAAoCF,oBAAS,GAA7C,mBAAOG,EAAP,KAAmBC,EAAnB,KACMC,EApCR,SAA0BC,EAA1B,GAA6D,IAA1BL,EAAyB,EAAzBA,UAAWE,EAAc,EAAdA,WACtCI,EAAa,YAAOD,GA6B1B,OA3BIH,GAEAI,EAAcC,UAMdP,GACFM,EAAcE,MAAK,SAACC,EAAOC,GACzB,OAAQV,GACN,KAAKJ,EACH,OAAOM,EACHQ,EAAMC,cAAcF,GACpBA,EAAME,cAAcD,GAE1B,KAAKb,EACH,OAAOK,EACHQ,EAAME,OAASH,EAAMG,OACrBH,EAAMG,OAASF,EAAME,OAE3B,QACE,OAAO,MAKRN,EAOHO,CAAiBlB,EAAiB,CAAEK,YAAWE,eAOnD,OACE,sBAAKY,UAAU,kBAAf,UACE,sBAAKA,UAAU,UAAf,UACE,wBACEC,KAAK,SACLD,UAAWE,IAAW,iBAAkB,CACtC,WAAYhB,IAAcJ,IAE5BqB,QAAS,kBAAMhB,EAAaL,IAL9B,iCAUA,wBACEmB,KAAK,SACLD,UAAWE,IAAW,oBAAqB,CACzC,WAAYhB,IAAcH,IAE5BoB,QAAS,kBAAMhB,EAAaJ,IAL9B,4BAUA,wBACEkB,KAAK,SACLD,UAAWE,IAAW,oBAAqB,CACzC,YAAad,IAEfe,QAAS,kBAAMd,GAAeD,IALhC,qBASCF,GAAaE,EAEV,wBACEa,KAAK,SACLD,UAAWE,IAAW,mBAAoB,CACxC,WAAYhB,IAEdiB,QA5CM,WAChBhB,EAAa,IACbE,GAAc,IAqCN,mBASE,MAGR,6BACGC,EAAac,KAAI,SAAAC,GAAI,OACpB,oBAEE,UAAQ,OAFV,SAIGA,GAHIA,YC9GjBC,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.88beb467.chunk.js","sourcesContent":["import 'bulma/css/bulma.css';\nimport './App.scss';\nimport { useState } from 'react';\nimport classNames from 'classnames';\n\nexport const goodsFromServer = [\n  'Dumplings',\n  'Carrot',\n  'Eggs',\n  'Ice cream',\n  'Apple',\n  'Bread',\n  'Fish',\n  'Honey',\n  'Jam',\n  'Garlic',\n];\nconst SORT_FIELD_NAME = 'name';\nconst SORT_FIELD_LENGTH = 'length';\n\nfunction getPreparedGoods(goods, { sortField, isReversed }) {\n  const preparedGoods = [...goods];\n\n  if (isReversed) {\n    if (sortField === SORT_FIELD_NAME || sortField === SORT_FIELD_LENGTH) {\n      preparedGoods.reverse();\n    } else {\n      preparedGoods.reverse();\n    }\n  }\n\n  if (sortField) {\n    preparedGoods.sort((good1, good2) => {\n      switch (sortField) {\n        case SORT_FIELD_NAME:\n          return isReversed\n            ? good2.localeCompare(good1)\n            : good1.localeCompare(good2);\n\n        case SORT_FIELD_LENGTH:\n          return isReversed\n            ? good2.length - good1.length\n            : good1.length - good2.length;\n\n        default:\n          return 0;\n      }\n    });\n  }\n\n  return preparedGoods;\n}\n\nexport const App = () => {\n  const [sortField, setSortField] = useState('');\n  const [isReversed, setIsReversed] = useState(false);\n  const visibleGoods\n    = getPreparedGoods(goodsFromServer, { sortField, isReversed });\n\n  const resetSort = () => {\n    setSortField('');\n    setIsReversed(false);\n  };\n\n  return (\n    <div className=\"section content\">\n      <div className=\"buttons\">\n        <button\n          type=\"button\"\n          className={classNames('button is-info', {\n            'is-light': sortField !== SORT_FIELD_NAME,\n          })}\n          onClick={() => setSortField(SORT_FIELD_NAME)}\n        >\n          Sort alphabetically\n        </button>\n\n        <button\n          type=\"button\"\n          className={classNames('button is-success', {\n            'is-light': sortField !== SORT_FIELD_LENGTH,\n          })}\n          onClick={() => setSortField(SORT_FIELD_LENGTH)}\n        >\n          Sort by length\n        </button>\n\n        <button\n          type=\"button\"\n          className={classNames('button is-warning', {\n            'is-light': !isReversed,\n          })}\n          onClick={() => setIsReversed(!isReversed)}\n        >\n          Reverse\n        </button>\n        {sortField || isReversed\n          ? (\n            <button\n              type=\"button\"\n              className={classNames('button is-danger', {\n                'is-light': sortField,\n              })}\n              onClick={resetSort}\n            >\n              Reset\n            </button>\n          ) : ''}\n      </div>\n\n      <ul>\n        {visibleGoods.map(good => (\n          <li\n            key={good}\n            data-cy=\"Good\"\n          >\n            {good}\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}